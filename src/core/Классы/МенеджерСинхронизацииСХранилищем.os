#Использовать gitrunner
#Использовать v8runner

Перем Лог;
Перем Параметры;
Перем Хранилище;
Перем УправлениеКонфигуратором;
Перем Репозиторий;
Перем ИмяУдаленногоРепозитория;
Перем ИмяВеткиРазработки;
Перем ИмяВеткиХранилища;

Процедура ПриСозданииОбъекта()
	
	Лог = ПараметрыПриложения.Лог();
	Параметры = ПараметрыПриложения.ПолучитьНастройки();

	Хранилище = Параметры.Хранилище;
	Репозиторий = Параметры.Репозиторий;

	База = Параметры.База;
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	УправлениеКонфигуратором.ПутьКПлатформе1С(Параметры.ПутьКПлатформе);
	УправлениеКонфигуратором.УстановитьКонтекст("/F"+База.ПутьКФайлуБазы, База.Пользователь, База.Пароль);
	УправлениеКонфигуратором.УстановитьИмяФайлаСообщенийПлатформы("temp\logs\Хранилище.log");

КонецПроцедуры

Процедура УстановитьИмяУдаленогоРепозитория(ИмяРепозитория) Экспорт
	ИмяУдаленногоРепозитория = ИмяРепозитория;
КонецПроцедуры

Процедура УстановитьВеткуРазработки(ИмяВетки) Экспорт
	ИмяВеткиРазработки = ИмяВетки;
КонецПроцедуры

Процедура УстановитьВеткуХранилища(ИмяВетки) Экспорт
	ИмяВеткиХранилища = ИмяВетки;
КонецПроцедуры

Процедура ВыполнитьСинхронизациюИзВеткиРазработкиВВеткуХранилищем() Экспорт

	сткДанныеСтатуса = Репозиторий.ДанныеСтатуса();

	Если сткДанныеСтатуса.ЕстьКонфликт Тогда
		Текст = "Есть конфликт";
		Лог.Ошибка(Текст);
		ВызватьИсключение Текст;
	ИначеЕсли сткДанныеСтатуса.ЕстьИзменения Тогда
		Лог.Информация("Есть изменения в Work tree");
		Возврат;
	КонецЕсли;

	ГитРепозиторий = Репозиторий.ГитРепозиторий;

	// git checkout gitsync && git pull
	Лог.Информация("Переход на ветку %1 и обновление", ИмяВеткиХранилища);
	ГитРепозиторий.ПерейтиВВетку(ИмяВеткиХранилища);
	ГитРепозиторий.Получить();

	// git fetch origin develop:develop
	Лог.Информация("Подтягивание ветки %1", ИмяВеткиРазработки);
	Репозиторий.ВыполнитьГитКоманду(СтрШаблон("git fetch %1 %2:%2", ИмяУдаленногоРепозитория, ИмяВеткиРазработки));

	// начинаем мерж
	Лог.Информация("Слияние ветки %1 в ветку %2", ИмяВеткиРазработки, ИмяВеткиХранилища);
	Репозиторий.ВыполнитьГитКоманду(СтрШаблон("git merge %1 --no-ff --no-commit", ИмяВеткиРазработки));
	
	Лог.Информация("отмена слияния служебных файлов");
	Репозиторий.ВыполнитьГитКоманду("git checkout HEAD src/VERSION src/AUTHORS .gitignore");
	Репозиторий.ВыполнитьГитКоманду("git reset tools/* && git clean -f tools/*");

	сткДанныеСтатуса = Репозиторий.ДанныеСтатуса();
	Если сткДанныеСтатуса.ЕстьКонфликт Тогда
		Текст = "Есть конфликт. Требуется разрешить конфликт вручную";
		Лог.Ошибка(Текст);
		ВызватьИсключение "
		|Разрешите конфликт и запустите команду повторно с ключем --continue";

	ИначеЕсли НЕ сткДанныеСтатуса.ЕстьИзменения Тогда
		Лог.Информация("Нет данных к синхронизации");
		Возврат;
		
	КонецЕсли;

	ПродолжениеПослеСлияния();

КонецПроцедуры

Процедура ПродолжениеПослеСлияния() Экспорт

	ОбновитьБазуИзХранилища();

	СписокОбъектовГит = СформироватьСписокОбъектовКПереносу();





КонецПроцедуры

Процедура Удалить()



	// http://gitsrv01/nadulich/devtools/-/issues/1

	// 1. Запустить команду гитсинк
	Команда = "gitsync.bat --v8version=8.3.25.1286 sync -u Администратор ./temp/хранилище ./src";
	//Служебные.ИсполнитьКоманду(Команда, Репозиторий.Путь);

	// 2. обновить базу из хранилища
	Команда = "vrunner.bat loadrepo --v8version=8.3.25.1286 --ibconnection /Ssrv1c\test --storage-name=./temp/хранилище  --storage-user=Администратор";
	//Служебные.ИсполнитьКоманду(Команда, Репозиторий.Путь);
	
	// 3. перейти на ветку gitsync
	Команда = "git checkout gitsync";
	Служебные.ИсполнитьКоманду(Команда, Репозиторий.Путь);
	Команда = "git pull";
	Служебные.ИсполнитьКоманду(Команда, Репозиторий.Путь);



        
//       проверить, что номер последней версии хранилища и номер версии в ветке совпадают

// УСПЕХ? Нет -> упали


	// 5. выполнить мерж из дев
	Команда = "git merge develop --ff";
	
	//Служебные.ВыполнитьКоманду(Команда, Репозиторий.Путь, "Консоль");
	КодВозврата = Служебные.ИсполнитьКоманду(Команда, Репозиторий.Путь);
	Если КодВозврата = 1 Тогда
		ВызватьИсключение "Ошибка выполнения команды: " + Команда;
	ИначеЕсли КодВозврата = 128 Тогда
		Лог.Ошибка("Выполнение остановлено!");
		// релизовать паузу?
		Возврат;
	ИначеЕсли КодВозврата = 129 Тогда
		ВызватьИсключение "Ошибка выполнения команды: " + Команда;
	ИначеЕсли КодВозврата <> 0 Тогда
		Лог.КритичнаяОшибка("Неизвестная ошибка выполнения команды. Код %1. Команда: %2", КодВозврата, Команда);
	КонецЕсли;
        
	// 6. получить дельту файлов gitsync и origin/gitsync && пусто -> выход
	Команда = "git diff --name-only gitsync origin/gitsync";
	мОбъекты = Служебные.ВыполнитьКоманду(Команда, Репозиторий.Путь, "Массив");
    Если НЕ ЗначениеЗаполнено(мОбъекты) Тогда
		Возврат;
	КонецЕсли;

        
	// 7.      захватить все объекты по дифф-списку

	// УСПЕХ? Нет -> упали



        
//       загрузить объекты по дифф-списку

        
//       поместить в хранилище, коментарий для хранилища:
// git log origin/gitsync..develop --pretty=oneline --merges --abbrev-commit


        
//       отправить ветку
// git push origin gitsync
КонецПроцедуры

Процедура ОбновитьБазуИзХранилища()
	Лог.Информация("обновляем базу 1С из хранилища...")
	//УправлениеКонфигуратором.ИсключениеПриОшибкеВыполненияКоманды(Ложь);
	УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанныхИзХранилища(Хранилище.Путь, Хранилище.Пользователь, Хранилище.Пароль);
	//УправлениеКонфигуратором.ИсключениеПриОшибкеВыполненияКоманды(Истина);
КонецПроцедуры

Функция СформироватьСписокОбъектовКПереносу()

	Лог.Информация("получаем список файлов для синхронизации");
	ВыводКоманды = Репозиторий.ВыполнитьГитКоманду("git diff --name-only HEAD");
	СписокОбъектовГит = СтрРазделить(ВыводКоманды, Символы.ПС, Ложь);
	Возврат СписокОбъектовГит;

КонецФункции
