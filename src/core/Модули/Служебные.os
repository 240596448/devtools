#Использовать fs

Перем КаталогРепозитория Экспорт;
Перем КаталогИсходников Экспорт;
Перем Лог;

Функция ЭтоЧисло(Строка) Экспорт
	Попытка
		Число = Число(Строка);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ЭтоХэшКоммита(Хэш) Экспорт

	Если НЕ (СтрДлина(Хэш) = 10 Или СтрДлина(Хэш) = 40) Тогда
		Возврат Ложь;
	КонецЕсли;

	КоманднаяСтрока = "git log --pretty=format:%H";
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Для Каждого Стр Из Вывод Цикл
		Если СтрНачинаетсяС(Стр, Хэш) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоТэг(Тэг) Экспорт

	КоманднаяСтрока = "git tag --list --no-color";
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Для Каждого Стр Из Вывод Цикл
		Если СтрНачинаетсяС(Стр, Тэг) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоВетка(ИмяВетки) Экспорт

	КоманднаяСтрока = "git branch --verbose --no-color";
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Для Каждого Стр Из Вывод Цикл
		Стр = Сред(Стр, 3);
		Стр = Сред(Стр, 1, СтрНайти(Стр, " ") - 1);
		Если Стр = ИмяВетки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСписокИзмененныхФайлов() Экспорт
	КоманднаяСтрока ="git status --porcelain";
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Массив = Новый Массив;
	Для каждого Стр Из Вывод Цикл
		части = СтрРазделить(Стр, " ", Ложь);
		Путь = СокрЛП(части[1]);
		Массив.Добавить(Путь);
	КонецЦикла;
	Возврат ЗаписатьОбъектыВФайл(НормализоватьИмена(ДополнитьПутиГит(Массив)));
КонецФункции

Функция ПолучитьСписокПоКоличествуКоммитов(СмещениеПервогоКоммита, СмещениеВторогоКоммитаИлиСсылка = "") Экспорт
	Если ЗначениеЗаполнено(СмещениеВторогоКоммитаИлиСсылка) Тогда
		КоманднаяСтрока = СтрШаблон("git diff --name-only HEAD~%1 HEAD~%2", СмещениеПервогоКоммита, СмещениеВторогоКоммитаИлиСсылка);
	Иначе
		КоманднаяСтрока = СтрШаблон("git diff --name-only HEAD~%1", СмещениеПервогоКоммита);
	КонецЕсли;
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Возврат ЗаписатьОбъектыВФайл(НормализоватьИмена(ДополнитьПутиГит(Вывод)));
КонецФункции

Функция ПолучитьСписокДоКоммита(Хэш, Хэш2 = "") Экспорт
	КоманднаяСтрока = СтрШаблон("git diff --name-only %1 %2", Хэш, Хэш2);
	Вывод = ВыполнитьКоманду(КоманднаяСтрока);
	Если НЕ ЗначениеЗаполнено(Вывод) Тогда
		Возврат "";
	Иначе
		Возврат ЗаписатьОбъектыВФайл(НормализоватьИмена(ДополнитьПутиГит(Вывод)));
	КонецЕсли;
КонецФункции

Функция СформироватьСписок(мОбъекты) Экспорт
	
	мСписокФайлов = Новый Массив();

	Для каждого Объект Из мОбъекты Цикл
		КаталогПоиска = КаталогИсходников;
		ПозПервогоСлеша = СтрНайти(Объект, "/");
		Если ПозПервогоСлеша = 0 Тогда
			ОбъектПоиска = Объект;
			ХвостОбъекта = "";
		Иначе
			ОбъектПоиска = Лев(Объект, ПозПервогоСлеша - 1);
			ХвостОбъекта = Сред(Объект, ПозПервогоСлеша + 1);
		КонецЕсли;

		Пока Истина Цикл

			Сообщить(СтрШаблон("Ищем %1 в каталоге %2", ОбъектПоиска, КаталогПоиска));
			мНайденныеФайлы = НайтиФайлы(КаталогПоиска, ОбъектПоиска, Истина);

			Если мНайденныеФайлы.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон("Объект %1 не найден в репозитории", ОбъектПоиска);
			ИначеЕсли мНайденныеФайлы.Количество() > 1 И СтрНайти(ОбъектПоиска, "*") = 0 Тогда
				сч = 10;
				Для Каждого НайденныйФайл Из мНайденныеФайлы Цикл
					мСписокФайлов.Добавить(НайденныйФайл.ПолноеИмя);
					сч = сч - 1;
					Если сч = 0 Тогда
						мСписокФайлов.Добавить(СтрШаблон("... и еще %1 файлов", мНайденныеФайлы.Количество() - 10));
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ВызватьИсключение СтрШаблон("
				|Найдено несколько путей для Объкта %1
				|Учточните маску поиска
				| - %2", ОбъектПоиска, СтрСоединить(мСписокФайлов, Символы.ПС + "
				| - "));
			КонецЕсли;

			Если ПозПервогоСлеша = 0 Тогда

				мИменаФайлов = Новый Массив();

				Для каждого Файл Из мНайденныеФайлы Цикл
					Если Файл.ЭтоФайл() Тогда
						мИменаФайлов.Добавить(Файл.ПолноеИмя);
					ИначеЕсли Файл.ЭтоКаталог() Тогда
						мФайлыОбъекта = НайтиФайлы(Файл.ПолноеИмя, ПолучитьМаскуВсеФайлы(), Истина);
						Для Каждого ФайлКаталога Из мФайлыОбъекта Цикл
							Если ФайлКаталога.ЭтоФайл() Тогда
								мИменаФайлов.Добавить(ФайлКаталога.ПолноеИмя);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				Если мИменаФайлов.Количество() = 0 Тогда
					ВызватьИсключение СтрШаблон("Папка Объекта %1 не содержит файлов", Объект);
				КонецЕсли;
				Для каждого ИмяФайла Из мИменаФайлов Цикл
					мСписокФайлов.Добавить(ИмяФайла);
				КонецЦикла;

				Прервать;
			
			Иначе

				КаталогПоиска = мНайденныеФайлы[0].ПолноеИмя;
				ПозПервогоСлеша = СтрНайти(ХвостОбъекта, "/");
				Если ПозПервогоСлеша = 0 Тогда
					ОбъектПоиска = ХвостОбъекта;
					ХвостОбъекта = "";
				Иначе
					ОбъектПоиска = Лев(ХвостОбъекта, ПозПервогоСлеша - 1);
					ХвостОбъекта = Сред(ХвостОбъекта, ПозПервогоСлеша + 1);
				КонецЕсли;
		
			КонецЕсли;
		
		КонецЦикла;

	КонецЦикла;
	
	мСписокФайлов = НормализоватьИмена(ДополнитьПутиГит(мСписокФайлов));
	
	Возврат ЗаписатьОбъектыВФайл(мСписокФайлов);
	
КонецФункции

Функция ПолучитьИзмененныеФайлы() Экспорт
	Хэш = ПолучитьХэшПоследнегоЗагруженногоКоммита();
	Если ЗначениеЗаполнено(Хэш) Тогда
		Возврат ПолучитьСписокДоКоммита(Хэш);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьХэшПоследнегоЗагруженногоКоммита() Экспорт

	ИмяФайла = ФайлПредыдущегоГитКоммита().ПолноеИмя;

	Если Не ФС.ФайлСуществует(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;

	Хэш = ПрочитатьИзФайла(ИмяФайла);

	Возврат СокрЛП(Хэш);

КонецФункции

Процедура ЗаписатьХэшПоследнегоЗагруженногоКоммита(Хэш) Экспорт

	ИмяФайла = ФайлПредыдущегоГитКоммита().ПолноеИмя;

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8NoBOM);
	ЗаписьТекста.Записать(Хэш);
	ЗаписьТекста.Закрыть();

	Лог.Информация("Хэш коммита %1 сохранен как успешно загруженная полная конфигурация: %2", Хэш, ИмяФайла);

КонецПроцедуры

Функция СкорректироватьПутьКИзменениюФормы(СтрокаИзмененныхФайлов)

	Паттерны = Новый Массив;
	Паттерны.Добавить("(.*\\Forms\\.*)\\Ext.*");
	Паттерны.Добавить("(.*\\Help)\\.+\.html");

	Для каждого Паттерн Из Паттерны Цикл
		РегулярноеВыражение = Новый РегулярноеВыражение(Паттерн);
		КоллекцияСовпаденийРегулярногоВыражения = РегулярноеВыражение.НайтиСовпадения(СтрокаИзмененныхФайлов);
		Если КоллекцияСовпаденийРегулярногоВыражения.Количество() = 1
			И КоллекцияСовпаденийРегулярногоВыражения[0].Группы.Количество() = 2 Тогда
			ИзмененнаяСтрока = РегулярноеВыражение.Заменить(СтрокаИзмененныхФайлов, "$1.xml");
			Возврат ИзмененнаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Возврат СтрокаИзмененныхФайлов;
КонецФункции

Функция НормализоватьИмена(МассивПутей)
	сИмена = Новый Соответствие();
	Для Каждого Стр Из МассивПутей Цикл
		Стр = СокрЛП(Стр);
		Стр = СкорректироватьПутьКИзменениюФормы(Стр);
		сИмена.Вставить(Стр);
	КонецЦикла;
	мТекст = Новый Массив();
	Для каждого КЗ Из сИмена Цикл
		мТекст.Добавить(КЗ.Ключ);
	КонецЦикла;
	Возврат СтрСоединить(мТекст, Символы.ПС);
КонецФункции

Функция ДополнитьПутиГит(МассивПутейГит)
	мТекст = Новый Массив();
	ОтносительныйПуть = КаталогИсходников + ПолучитьРазделительПути();
	Для Каждого Стр Из МассивПутейГит Цикл
		Стр = СокрЛП(Стр);
		Если ФайлВСпискеИсключений(Стр) Тогда
			Продолжить;
		КонецЕсли;
		Путь = ОбъединитьПути(КаталогРепозитория, СтрЗаменить(Стр, "/", ПолучитьРазделительПути()));
		Файл = Новый Файл(Путь);
		Если СтрНачинаетсяС(Файл.ПолноеИмя, ОтносительныйПуть) Тогда
			ПутьВИсходниках = СтрЗаменить(Файл.ПолноеИмя, ОтносительныйПуть, "");
			// требудется добавлять в список в точ числе удаляемые файлы
			//Если Файл.Существует() И Файл.ЭтоФайл() Тогда
				мТекст.Добавить(ПутьВИсходниках);
			//Иначе
			//	мТекст.Добавить(Лев(ПутьВИсходниках, СтрНайти(ПутьВИсходниках, ПолучитьРазделительПути(), , , 2) - 1));
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат мТекст;
КонецФункции

Функция ФайлВСпискеИсключений(ПутьКФайлу)

	Возврат СтрЗаканчиваетсяНа(ПутьКФайлу, "ConfigDumpInfo.xml")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "AUTHORS")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "VERSION")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "dumplist.txt")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, "ParentConfigurations_mod.bin")
		Или СтрЗаканчиваетсяНа(ПутьКФайлу, ИмяФайлаПредыдущегоГитКоммита())
		;

КонецФункции

Функция ФайлПредыдущегоГитКоммита(Знач Путь = "temp")
	ФС.ОбеспечитьКаталог(Путь);
	Возврат Новый Файл(ОбъединитьПути(Путь, ИмяФайлаПредыдущегоГитКоммита()));
КонецФункции

Функция ИмяФайлаПредыдущегоГитКоммита()
	Возврат "lastUploadedCommit.txt";
КонецФункции

Функция ВыполнитьКоманду(КоманднаяСтрока, ТипВывода = "Массив") Экспорт
	
	Лог.Отладка("Запускаю команду: %1", КоманднаяСтрока);

	Процесс = СоздатьПроцесс(КоманднаяСтрока, КаталогИсходников, Истина, , КодировкаТекста.UTF8);
	Процесс.Запустить();
	Процесс.ОжидатьЗавершения();
	
	мСтроки = Новый Массив();
	Пока Процесс.ПотокВывода.ЕстьДанные Цикл
		СтрокаВывода = Процесс.ПотокВывода.ПрочитатьСтроку();
		Если ТипВывода = "Консоль" Тогда
			Сообщить(СтрокаВывода);
		Иначе
			мСтроки.Добавить(СтрокаВывода);
		КонецЕсли;
	КонецЦикла;

	Если ТипВывода = "Массив" Тогда
		Возврат мСтроки;
	ИначеЕсли ТипВывода = "Строка" Тогда
		Возврат СтрСоединить(мСтроки, Символы.ПС);
	КонецЕсли;

КонецФункции

Функция ЗаписатьВоВременныйФайл(Текст, Расширение = "list") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8NoBOM);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
	Возврат ИмяВременногоФайла;

КонецФункции

Функция ЗаписатьОбъектыВФайл(Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФайла = ИмяФайлаСпискаОбъектовПоУмолчанию();

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8NoBOM);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
	Возврат ИмяФайла;

КонецФункции

Функция ИмяФайлаСпискаОбъектовПоУмолчанию() Экспорт
	Возврат ОбъединитьПути(ТекущийКаталог(), "tools", "logs", "СписокОбъектовДляЗагрузки.txt");
КонецФункции

Функция ПрочитатьИзФайла(ИмяФайла, вМассив = Ложь) Экспорт

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8NoBOM);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если вМассив Тогда
		Возврат ТекстВМассив(Текст);
	Иначе
		Возврат Текст;
	КонецЕсли;

КонецФункции

Функция ТекстВМассив(Текст) Экспорт
	мТекст = Новый Массив();
	Для НомерСтроки=1 По СтрЧислоСтрок(Текст) Цикл
		мТекст.Добавить(СтрПолучитьСтроку(Текст, НомерСтроки));
	КонецЦикла;
	Возврат мТекст;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Лог = ПараметрыПриложения.Лог();