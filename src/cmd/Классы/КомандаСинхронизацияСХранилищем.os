Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("origin", "origin", "синоним удаленного репозитория")
			.ВОкружении("DT_ORIGIN")
			.ТСтрока();

	Команда.Опция("dev", "develop", "основная ветка разработки в git")
			.ВОкружении("DT_BRANCH_DEVELOP")
			.ТСтрока();

	Команда.Опция("sync", "gitsync", "ветка синхронизации 1С хранилища")
			.ВОкружении("DT_BRANCH_GITSYNC")
			.ТСтрока();

	Команда.Опция("continue", Ложь, "продолжить выполнение после зазрешения конфликтов")
			.Флаг();

	Команда.Опция("abort", Ложь, "откатить незавершенную процедуру переноса")
			.Флаг();

	Команда.Опция("cancel", ".gitignore", "исключаемые из синхронизации файлы, дополнительно к `src/VERSION,src/AUTHORS`, через запятую")
			.ВОкружении("DT_CANCEL_FILE")
			.ТСтрока();

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	Лог = ПараметрыПриложения.Лог();
	
	ИмяУдаленногоРепозитория         = Команда.ЗначениеОпции("origin");
	ИмяОсновнойВеткиРазработки       = Команда.ЗначениеОпции("dev");
	ИмяВеткиСинхронизацииСХранилищем = Команда.ЗначениеОпции("sync");
	ПродолжитьПослеКонфликта         = Команда.ЗначениеОпции("continue");
	ОтменаВыполнения                 = Команда.ЗначениеОпции("abort");
	ИсключаемыеДопФайлы              = Команда.ЗначениеОпции("cancel");

	ЗамерНачало = ТекущаяДата();
	Лог.Информация("Начало: %1", ЗамерНачало);

	МенеджерСинхронизацииСХранилищем = Новый МенеджерСинхронизацииСХранилищем();
	
	МенеджерСинхронизацииСХранилищем.УстановитьИмяУдаленогоРепозитория(ИмяУдаленногоРепозитория);
	МенеджерСинхронизацииСХранилищем.УстановитьВеткуРазработки(ИмяОсновнойВеткиРазработки);
	МенеджерСинхронизацииСХранилищем.УстановитьВеткуХранилища(ИмяВеткиСинхронизацииСХранилищем);
	МенеджерСинхронизацииСХранилищем.УстановитьДополнительноИсключаемыеФайлы(ИсключаемыеДопФайлы);
	
	Если ОтменаВыполнения Тогда
		Лог.Информация("Команда: Отмена захвата хранилище и прерывание мержа");
		МенеджерСинхронизацииСХранилищем.ОтменаВыполнения();
	ИначеЕсли ПродолжитьПослеКонфликта Тогда
		Лог.Информация("Команда: Продолжение перенос изменений из репозитория в хранилище");
		МенеджерСинхронизацииСХранилищем.ПродолжениеПослеСлияния();
	Иначе
		Лог.Информация("Команда: Перенос изменений из репозитория в хранилище");
		МенеджерСинхронизацииСХранилищем.ВыполнитьСинхронизациюИзВеткиРазработкиВВеткуХранилищем();
	КонецЕсли;

	ЗамерОкончание = ТекущаяДата();
	Лог.Информация("Окончание: %1", ЗамерОкончание);
	
	ДлительностьСекунд = ЗамерОкончание - ЗамерНачало;
	Лог.Информация("Время выполнения: %1:%2 мин", Цел(ДлительностьСекунд / 60), ДлительностьСекунд % 60);

КонецПроцедуры
